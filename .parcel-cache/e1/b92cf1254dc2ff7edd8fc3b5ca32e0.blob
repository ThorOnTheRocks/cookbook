var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _configJs = require("./config.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _resultsViewJs = require("./views/resultsView.js");
var _resultsViewJsDefault = parcelHelpers.interopDefault(_resultsViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _bookmarksViewJs = require("./views/bookmarksView.js");
var _bookmarksViewJsDefault = parcelHelpers.interopDefault(_bookmarksViewJs);
var _addRecipeViewJs = require("./views/addRecipeView.js");
var _addRecipeViewJsDefault = parcelHelpers.interopDefault(_addRecipeViewJs);
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
if (module.hot) module.hot.accept();
const controlRecipes = async ()=>{
    try {
        const id = window.location.hash.slice(1);
        if (!id) return;
        _recipeViewJsDefault.default.renderSpinner();
        //Update results view to mark selected results
        _resultsViewJsDefault.default.update(_modelJs.getSearchResultPage());
        // Update bookmarks view
        _bookmarksViewJsDefault.default.update(_modelJs.state.bookmarks);
        //Loading Recipe
        await _modelJs.loadRecipe(id);
        const { recipe  } = _modelJs.state;
        //Rendering Recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
    } catch (err) {
        console.log(err);
        _recipeViewJsDefault.default.renderError();
    }
};
const controlSearchResults = async ()=>{
    try {
        _resultsViewJsDefault.default.renderSpinner();
        // Get Search Query
        const query = _searchViewJsDefault.default.getQuery();
        if (!query) return;
        // Load search results
        await _modelJs.loadSearchResults(query);
        // Render results
        _resultsViewJsDefault.default.render(_modelJs.getSearchResultPage(6));
        // Render initial pagination buttons
        _paginationViewJsDefault.default.render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
const controlPagination = (goToPage)=>{
    // Render New results
    _resultsViewJsDefault.default.render(_modelJs.getSearchResultPage(goToPage));
    // Render New pagination buttons
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = (newServings)=>{
    // Update the recipe servings (in state)
    _modelJs.updateServings(newServings);
    // Update the recipe view
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = ()=>{
    // Add or remove bookmark
    if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe);
    else _modelJs.deleteBookmark(_modelJs.state.recipe.id);
    // Update recipe view
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
    // Render bookmarks
    _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlBookmarks = ()=>{
    _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async (newRecipe)=>{
    try {
        // Show Loading Spinner
        _addRecipeViewJsDefault.default.renderSpinner();
        // Upload new recipe data
        await _modelJs.uploadRecipe(newRecipe);
        // Render recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
        // Success Message
        _addRecipeViewJsDefault.default.renderMessage();
        // Render bookmark view
        _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
        // Close Form window
        setTimeout(()=>{
            _addRecipeViewJsDefault.default.toggleWindow();
        }, _configJs.MODAL_CLOSE_SEC * 1000);
    } catch (err) {
        _addRecipeViewJsDefault.default.renderError(err.message);
    }
};
const init = ()=>{
    _bookmarksViewJsDefault.default.addHandlerRender(controlBookmarks);
    _recipeViewJsDefault.default.addHandlerRender(controlRecipes);
    _recipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
    _recipeViewJsDefault.default.addHandlerAddBookmark(controlAddBookmark);
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults);
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
    _addRecipeViewJsDefault.default.addHandlerUpload(controlAddRecipe);
};
init();
