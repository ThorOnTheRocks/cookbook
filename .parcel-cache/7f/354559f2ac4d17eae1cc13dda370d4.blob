var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _configJs = require("./config.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _resultsViewJs = require("./views/resultsView.js");
var _resultsViewJsDefault = parcelHelpers.interopDefault(_resultsViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _bookmarksViewJs = require("./views/bookmarksView.js");
var _bookmarksViewJsDefault = parcelHelpers.interopDefault(_bookmarksViewJs);
var _addRecipeViewJs = require("./views/addRecipeView.js");
var _addRecipeViewJsDefault = parcelHelpers.interopDefault(_addRecipeViewJs);
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
var _regeneratorRuntime = require("regenerator-runtime");
const controlRecipes = async ()=>{
    try {
        const id = window.location.hash.slice(1);
        if (!id) return;
        _recipeViewJsDefault.default.renderSpinner();
        // 0) Update results view to mark selected search result
        _resultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
        // 1) Updating bookmarks view
        _bookmarksViewJsDefault.default.update(_modelJs.state.bookmarks);
        // 2) Loading recipe
        await _modelJs.loadRecipe(id);
        // 3) Rendering recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
    } catch (err) {
        _recipeViewJsDefault.default.renderError();
        console.error(err);
    }
};
const controlSearchResults = async ()=>{
    try {
        _resultsViewJsDefault.default.renderSpinner();
        // 1) Get search query
        const query = _searchViewJsDefault.default.getQuery();
        if (!query) return;
        // 2) Load search results
        await _modelJs.loadSearchResults(query);
        // 3) Render results
        _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage());
        // 4) Render initial pagination buttons
        _paginationViewJsDefault.default.render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
const controlPagination = (goToPage)=>{
    // 1) Render NEW results
    _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
    // 2) Render NEW pagination buttons
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = (newServings)=>{
    // Update the recipe servings (in state)
    _modelJs.updateServings(newServings);
    // Update the recipe view
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = ()=>{
    // 1) Add/remove bookmark
    if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe);
    else _modelJs.deleteBookmark(_modelJs.state.recipe.id);
    // 2) Update recipe view
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
    // 3) Render bookmarks
    _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlBookmarks = ()=>{
    _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async (newRecipe)=>{
    try {
        // Show loading spinner
        _addRecipeViewJsDefault.default.renderSpinner();
        // Upload the new recipe data
        await _modelJs.uploadRecipe(newRecipe);
        console.log(_modelJs.state.recipe);
        // Render recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
        // Success message
        _addRecipeViewJsDefault.default.renderMessage();
        // Render bookmark view
        _bookmarksViewJsDefault.default.render(_modelJs.state.bookmarks);
        // Change ID in URL
        window.history.pushState(null, '', `#${_modelJs.state.recipe.id}`);
        // Close form window
        setTimeout(()=>{
            _addRecipeViewJsDefault.default.toggleWindow();
        }, _configJs.MODAL_CLOSE_SEC * 1000);
    } catch (err) {
        console.error('ðŸ’¥', err);
        _addRecipeViewJsDefault.default.renderError(err.message);
    }
};
const init = function() {
    _bookmarksViewJsDefault.default.addHandlerRender(controlBookmarks);
    _recipeViewJsDefault.default.addHandlerRender(controlRecipes);
    _recipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
    _recipeViewJsDefault.default.addHandlerAddBookmark(controlAddBookmark);
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults);
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
    _addRecipeViewJsDefault.default.addHandlerUpload(controlAddRecipe);
};
init();
